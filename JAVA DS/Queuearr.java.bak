import java.util.Scanner;

class Queuearr{
    private int[] queueArray;
    private int front;
    private int rear;
    private int size;

    // Constructor to initialize the queue
    public Queuearr() {
        queueArray = new int[2];  // Initial capacity is 2
        front = 0;
        rear = -1;
        size = 0;
    }

    // Method to check if the queue is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // Method to add an element to the queue
    public void enqueue(int element) {
        if (size == queueArray.length) {
            // Resize the array if the queue is full
            resize();
        }
        
        rear = (rear + 1) % queueArray.length;  // Circular increment
        queueArray[rear] = element;
        size++;
        System.out.println("Enqueued " + element);
    }

    // Method to remove an element from the queue
    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue");
            return -1;  // Indicating that the queue is empty
        } else {
            int dequeuedElement = queueArray[front];
            front = (front + 1) % queueArray.length;  // Circular increment
            size--;
            return dequeuedElement;
        }
    }

    // Method to get the front element without removing it
    public int front() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
            return -1;
        } else {
            return queueArray[front];
        }
    }

    // Method to display the queue elements
    public void displayQueue() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
        } else {
            System.out.print("Queue elements: ");
            for (int i = 0; i < size; i++) {
                System.out.print(queueArray[(front + i) % queueArray.length] + " ");
            }
            System.out.println();
        }
    }

    
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue queue = new Queue();  // Create a queue with dynamic resizing

        while (true) {
            System.out.println("\nQueue Operations:");
            System.out.println("1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Display Queue");
            System.out.println("4. Front Element");
            System.out.println("5. Exit");
            System.out.print("Choose an operation: ");
            
            int choice = scanner.nextInt();
            
            switch (choice) {
                case 1:  // Enqueue
                    System.out.print("Enter element to enqueue: ");
                    int element = scanner.nextInt();
                    queue.enqueue(element);
                    break;
                
                case 2:  // Dequeue
                    int dequeuedElement = queue.dequeue();
                    if (dequeuedElement != -1) {
                        System.out.println("Dequeued: " + dequeuedElement);
                    }
                    break;
                
                case 3:  // Display Queue
                    queue.displayQueue();
                    break;
                
                case 4:  // Front Element
                    int frontElement = queue.front();
                    if (frontElement != -1) {
                        System.out.println("Front element: " + frontElement);
                    }
                    break;
                
                case 5:  // Exit
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }
}

